- name: Enable NFV
  hosts: pending
  vars:
     sriov_interface: p5p1
     passthrough_interface: p5p2
     pci_id: "8086:1515"
  
  tasks:

   # This Playbook implements the setup suggested in this article: https://access.redhat.com/articles/1324143

   # 1. RHEL Configuration

   - name: Check if intel_iommu has been added already to GRUB
     command: awk /.*intel_iommu=on/ /etc/default/grub
     register: intel_iommu_exists

   - name: Enable Intel VT-d in GRUB
     lineinfile: dest=/etc/default/grub regexp='(^GRUB_CMDLINE_LINUX=.*)"$' line='\1 intel_iommu=on ixgbe.max_vfs=7"' backup=True backrefs=yes
     notify:
      - Regenerate config file
      - Rebuild initramfs
      - Reboot
      - Wait for server to come back
     when: intel_iommu_exists.stdout == ""

   - name: Enable Virtual Functions parameter in module
     modprobe: name=ixgbe state=present params="max_vfs=7"

   #- name: Make Virtual Functions parameter persistent
   #  lineinfile: dest=/etc/modprobe.d/ixgbe.conf line="options ixgbe max_vfs=7" state=present create=yes

   - name: Set allow_unsafe_interrupts options
     lineinfile: dest=/etc/modprobe.d/dist.conf line="options vfio_iommu_type1 allow_unsafe_interrupts=1" state=present create=yes

   - name: Set max_vfs to 7 just in sriov_interface
     shell: | 
            echo 7 > /sys/class/net/{{sriov_interface}}/device/sriov_numvfs
            echo 0 > /sys/class/net/{{passthrough_interface}}/device/sriov_numvfs
            chmod +x /etc/rc.d/rc.local
    
   - name: Make Virtual Functions parameter persistent 
     lineinfile: dest=/etc/rc.d/rc.local line={{ item.line }} state=present
     with_items:
       - { line: "echo 7 > /sys/class/net/{{sriov_interface}}/device/sriov_numvfs" }
       - { line: "echo 0 > /sys/class/net/{{passthrough_interface}}/device/sriov_numvfs"}
       - { line: "ip link set {{sriov_interface}} up"}
       - { line: "ip link set {{passthrough_interface}} up"}

   - name: Make admin state of {{passthrough_interface}} UP
     template: src=templates/ifcfg-{{passthrough_interface}} dest=/etc/sysconfig/network-scripts/ifcfg-{{passthrough_interface}}
     notify: ifup {{passthrough_interface}}
   
   # 2. Neutron Configuration

   - name: Add vlan to Neutron ML2 drivers
     ini_file: dest=/etc/neutron/plugin.ini section=ml2 option=type_drivers value="vxlan,vlan" backup=yes

   - name: Add vlan option to Neutron ML2
     ini_file: dest=/etc/neutron/plugin.ini section=ml2 option=tenant_network_types value="vxlan,vlan" backup=yes
   
   - name: Add sriovnicswitch option to mecanish_drivers to Neutron ML2
     ini_file: dest=/etc/neutron/plugin.ini section=ml2 option=mechanism_drivers value="openvswitch,sriovnicswitch" backup=yes

   - name: Add VLANs 16 to 22 to network_vlan_ranges Neutron ML2
     ini_file: dest=/etc/neutron/plugin.ini section=ml2_type_vlan option=network_vlan_ranges value="physnet_sriov:16:22" backup=yes

   - name: Add supported_pci_vendor_devs to ml2_conf_sriov.ini
     ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf_sriov.ini section=ml2_sriov option=supported_pci_vendor_devs value={{pci_id}} backup=yes

   - name: Set up scheduler filters
     ini_file: dest=/etc/nova/nova.conf section=DEFAULT option={{ item.option }} value={{ item.value }} backup=yes     
     with_items:
       - { option: 'scheduler_available_filters', value: 'nova.scheduler.filters.all_filters'}
       - { option: 'scheduler_default_filters', value: 'RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,CoreFilter,PciPassthroughFilter'}
     notify:
       - Restart nova scheduler

   - name: Add pci_passthrough_whitelist to nova.conf
     lineinfile:
       dest: /etc/nova/nova.conf
       insertafter: '^\[DEFAULT\]'
       line: 'pci_passthrough_whitelist={ "devname": "{{ sriov_interface }}", "physical_network": "physnet_sriov"}'


   - name: Add ml2_conf_sriov.ini to neutron-server systemd file
     lineinfile: dest=/usr/lib/systemd/system/neutron-server.service regexp="(^.*.)(--log-file /var/log/neutron/server.log$)" line="\1 \2 --config-file /etc/neutron/plugins/ml2/ml2_conf_sriov.ini" backup=True backrefs=yes

   #  notify:
   #    - Restart neutron server
   # sriov-nic-agent does not work with these cards
   #
   # - name: Install the sriov-nic-agent package 
   #   yum: name=openstack-neutron-sriov-nic-agent state=latest

   # - name: Enable NoopFirewallDriver in the /etc/neutron/plugin.ini file
   #   ini_file: dest=/etc/neutron/plugin.ini section=securitygroup option=firewall_driver value=neutron.agent.firewall.NoopFirewallDriver backup=yes

   # - name: Add mappings to the /etc/neutron/plugins/ml2/ml2_conf_sriov.ini file
   #  ini_file: dest=/etc/neutron/plugins/ml2/ml2_conf_sriov.ini  section={{ item.section }}  option={{ item.option }} value={{ item.value }} backup=yes
   #  with_items:
   #    - { section: 'sriov_nic', option: 'physical_device_mappings', value: 'physnet1:{{sriov_interface}}'}
   #    - { section: 'sriov_nic', option: 'exclude_devices', value: ''}

   # - name: Add ml2_conf_sriov.ini to neutron-sriov-nic-agent systemd file
   #   lineinfile: dest=/usr/lib/systemd/system/neutron-sriov-nic-agent.service regexp="(^.*.)(--log-file /var/log/neutron/sriov-nic-agent.log$)" line="\1 \2 --config-file /etc/neutron/plugins/ml2/ml2_conf_sriov.ini" backup=True backrefs=yes

   # - name: Add ml2_conf_sriov.ini to neutron-server systemd file
   #  lineinfile: dest=/usr/lib/systemd/system/neutron-server.service regexp="(^.*.)(--log-file /var/log/neutron/server.log$)" line="\1 \2 --config-file /etc/neutron/plugins/ml2/ml2_conf_sriov.ini" backup=True backrefs=yes
   #  notify:
   #    - Restart neutron server

   #Â - name: Enable and start neutron-sriov-nic-agent
   #  service: name=neutron-sriov-nic-agent state=started enabled=yes

  handlers:

   - name: Regenerate config file 
     command: grub2-mkconfig -o /boot/grub2/grub.cfg

   - name: Rebuild initramfs
     shell: |
            cp /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.$(date +%m-%d-%H%M%S).bak
            dracut -f -v

   - name: Reboot
     shell: sleep 2 && shutdown -r now "Ansible reboot"
     async: 1
     poll: 0
     ignore_errors: true
  
   - name: Wait for server to come back
     local_action: wait_for host={{ inventory_hostname }} state=started delay=30 timeout=300

   - name: Restart nova scheduler
     service: name=openstack-nova-scheduler state=restarted

   - name: Restart nova compute 
     service: name=openstack-nova-compute state=restarted

   - name: Restart neutron server
     service: name=openstack-nova-compute state=restarted

   - name: ifup {{passthrough_interface}}
     shell: ifup {{passthrough_interface}}
   